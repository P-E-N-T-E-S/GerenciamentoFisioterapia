Domain Fisioterapia {
    Subdomain GestaoPacientes
    Subdomain GestaoConsultas
    Subdomain GestaoMateriais
    Subdomain Relatorios
}

ContextMap FisioterapiaContextMap {
    contains GestaoPacientes
    contains GestaoConsultas
    contains GestaoMateriais
    contains Relatorios

    GestaoPacientes [SK]<->[SK] GestaoConsultas
    GestaoConsultas [SK]<->[SK] GestaoMateriais
    GestaoPacientes [SK]<->[SK] Relatorios
    GestaoConsultas [SK]<->[SK] Relatorios
}

BoundedContext GestaoPacientes implements GestaoPacientes {
    Aggregate Paciente {
        Entity Paciente {
            aggregateRoot
            - PacienteId pacienteId
            String nome
            - Cpf cpf
            - Endereco endereco
            String contato
            String medicoResponsavel
            -FichaMedica fichaMedica

            def void vincularFichaMedica(@FichaMedica ficha);

            Repository PacienteRepository{
                void cadastrar(@Paciente paciente);
                void deletar(@PacienteId id);
                void atualizar(@Paciente paciente);
                @Paciente buscarPorId(@PacienteId id);
                List<@Paciente> listarPacientes();
                List<@Paciente> pesquisarPorNome(String nome);
            }
        }

        Service ServicoPacientes {

            void cadastrarPaciente(@Paciente paciente, boolean notificarUsuario);
            @Paciente buscarPacientePorId(@PacienteId id);
            List<@Paciente> listarPacientes();
            boolean gerarPdfFichaMedica(@FichaMedica ficha);
            boolean simularGeracaoPdf(@PacienteId pacienteId);
            @FichaMedica obterFichaMedica(@PacienteId pacienteId);
            boolean deveSolicitarObservacoes(@PacienteId pacienteId);
            void editarPaciente(@Paciente paciente);
            List<@Paciente> pesquisarPorNome(String nome);
            void excluirPaciente(@PacienteId pacienteId);
        }

        ValueObject Cpf {
            String numero
        }

        ValueObject Endereco {
            String logradouro
            String numero
            String complemento nullable
            String cep 
            String cidade
        }


        ValueObject PacienteId{
            long id
        }

        Entity FichaMedica {
            long id
            - PacienteId pacienteId
            String historicoMedico
            String alergias
            String observacoes
            LocalDateTime ultimaAtualizacao

            def void preencherDadosClinicos(String historicoMedico, String alergias);
            def void preencherDadosClinicosJPA(String historicoMedico, String alergias, LocalDateTime now);
            def boolean validarDadosObrigatorios();
            def void adicionarObservacaoJPA(String observacao, LocalDateTime now);
        }
    }
}

BoundedContext GestaoConsultas implements GestaoConsultas {
    Aggregate Consulta {
        Entity Consulta {
            aggregateRoot
            - ConsutaId consultaId
            LocalDateTime dataHora
            - Paciente paciente
            LocalDate data_vencimento
            boolean clientePagou
            String descricao
            - Material materiais
            -Endereco local
            Double valor


            Repository ConsultaRepository{
                void salvar(@Consulta consulta);
                void deletar(@Consulta consulta);
                List<@Consulta> buscarConsultaPorData(LocalDate data);
                List<@Consulta> listarConsultas();
                Consulta buscarPorId(Long id);
                List<@Consulta> buscarConsultaPorDataVencimento(LocalDate data);
            }
        }

        Entity Procedimento {
            LocalDate dataRealizacao
            - TipoProcedimento tipo
            String detalhes
            String local
        }

        enum TipoProcedimento {
            CONSULTA_PADRAO,
            INTRA_OPERATORIO
        }

        Service ConsultaService {
            void salvar(@Consulta consulta);
            List<@Consulta> buscarPorData(LocalDate data);
            List<@Consulta> listarConsultas();
            @Consulta buscarPorId(Long id);
            void deletarPorId(Long id);
            void editar(@Consulta consulta);
            List<@Consulta> buscarPorDataVencimento(LocalDate data);
        }

        Service NotificacaoPagamentoPacienteServico {
            String verificarPagamentoPendenteDia(@Paciente paciente, Map<String, @Consulta> agenda, LocalDate datafiltro);
            String verificarPagamentoPendenteSemana(@Paciente paciente, Map<String, @Consulta> agenda, LocalDate datafiltro);
        }

    }
}

BoundedContext GestaoMateriais implements GestaoMateriais {
    Aggregate Material {
        Entity Material {
            aggregateRoot
            String nome
            int quantidade
            Long id

            Repository MaterialRepository{
                void salvar(@Material material);
                void deletar(Long id);
                void editar(@Material material, Long id);
                void editarPorNome(@Material material, String nome);
            }
        }

        Service MaterialServico {
            void adicionar(String nome, int quantidade);
            void remover(String nome, int quantidade);
            List<@Material> listarMateriais();
            void editar(String nome, int quantidade, Long id);
            void deletarPorId(Long id);
            @Material buscarPorNome(String nome);
        }
    }
}

BoundedContext Relatorios {
    Aggregate Relatorio {
        Entity Calendario{
            def List<@Consulta> setupCalendario(Map<String, @Consulta> agenda);
        }


        Service HistoricoProcedimentosService {
            void adicionarProcedimento(@Procedimento procedimento);
            List<@Procedimento> filtrarPorDataExata(LocalDate data);
            List<@Procedimento> filtrarPorMesAno(int mes, int ano);
            List<@Procedimento> filtrarPorTipo(@TipoProcedimento tipo);
            List<@Procedimento> listarProcedimentosPorData(LocalDate data);
            List<@Procedimento> listarProcedimentosPorTipo(@TipoProcedimento tipo);
            void limparProcedimentos();
        }
    }
}
